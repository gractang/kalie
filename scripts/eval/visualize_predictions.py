import sys; sys.path.append("./")
import json
import matplotlib.pyplot as plt
from PIL import Image
from kalie.utils.utils import str_to_points_dicts, json_to_points_dicts, calculate_errors, transform_original, crop_realtime_eval, descale_point, print_fail, print_debug
import argparse
import re
import os

from absl import app, flags

FLAGS = flags.FLAGS

flags.DEFINE_string('test_json', '/home/grace/board-game-bot/sweeping_val/data_jsonformat.json', 'Path to the test json file')
flags.DEFINE_string('model_output_json', '/home/grace/board-game-bot/eval_outputs/2024-08-09-02-50_10_sweep_val.json', 'Path to the JSON file containing model prediction')
flags.DEFINE_string('format_style', 'json', 'String or JSON formatting')

flags.DEFINE_string('outdir', 'eval_outputs/figs/10_sweep_val/', 'Output directory for visualizations')
# flags.DEFINE_string('outdir', 'eval_outputs/figs/aug_test_orig_objs/', 'Output directory for visualizations')

flags.DEFINE_boolean('debug', False, 'Debug mode')
flags.DEFINE_boolean('save', True, 'Save visualizations to files')

def parse_json_string(res):
    res = res[res.find('{'):] if res.find('{') != 0 else res
    data = json.loads(res)
    grasp_point = [int(pt) for pt in data["Grasp Point"]]
    function_point = [int(pt) for pt in data["Function Point"]]
    target_point = [int(pt) for pt in data["Target Point"]]
    pre_contact_point = [int(pt) for pt in data["Pre-contact Point"]]
    post_contact_point = [int(pt) for pt in data["Post-contact Point"]]
    return [grasp_point, function_point, target_point, pre_contact_point, post_contact_point]

def parse_model_output(model_output_json): 
    with open(model_output_json, 'r') as json_file:
        result_strings = json.load(json_file)
    return result_strings

def parse_pred_label_chunks(str): 
    pattern = r"pred\s+([^()]+)\s+label\s+([^()]+)$"
    match = re.search(pattern, str)
    if match:
        return match.group(1), match.group(2)
    else:
        return None, None
    
# get the ith entry key from the json file
def get_entry(json_file, i):
    with open(json_file, 'r') as file:
        data = json.load(file)
    return list(data.keys())[i]

def get_rescaled_points(json_file, entry_key, orig_str):
    with open(json_file, 'r') as file:
        data = json.load(file)
    
    entry_dict = data[entry_key]
    image_path = entry_dict["img"]
    w, h = 450, 450
    
    def get_crop(obs_image_path):
        orig_image = Image.open(obs_image_path).convert('RGB') 
        _, crop = crop_realtime_eval(orig_image, w, h)
        return crop
        
    crop = get_crop(image_path)
    
    try:
        points = parse_json_string(orig_str)
    except:
        print_fail(f"Error parsing pred string: {orig_str}")
        return
    scaled_points = [transform_original(descale_point(point, w, h), crop) for point in points]
    return scaled_points

def create_viz(json_file, entry_key, pred_points, label_points, save=False, outdir="eval_outputs/figs/", output_type="str"):
    with open(json_file, 'r') as file:
        data = json.load(file)
    
    entry_dict = data[entry_key]
    image_path = entry_dict["img"]

    # Load the image
    img = Image.open(image_path)

    # Create a figure and axis to plot on
    fig, ax = plt.subplots()
    ax.imshow(img)
    
    for point, color, label in zip(label_points, 
                                        ['red', 'blue', 'green', 'yellow', 'purple'], 
                                        ['Grasp', 'Function', 'Target', 'Pre-contact', 'Post-contact']):
            print_debug((point, label), debug=FLAGS.debug)
            plt.scatter(point[0], point[1], c=color, label=label) 
            
    for point, color, label in zip(pred_points, 
                                ['red', 'blue', 'green', 'yellow', 'purple'], 
                                ['Grasp', 'Function', 'Target', 'Pre-contact', 'Post-contact']):
            print_debug((point, label), debug=FLAGS.debug)
            plt.scatter(point[0], point[1], label=label, facecolors='none', edgecolors=color) 

    # Add a legend
    ax.legend()
    
    if save:
        os.makedirs(outdir, exist_ok=True)
        filename = f"{outdir}{entry_key}_viz.png"
        plt.savefig(filename)
        
    else:
        plt.show()
    
    plt.close()

"""
Usage:
python visualize_predictions.py test.json model_output.json 
- test.json is the json for the test data generated by split_dataset.py
- model_output.json is the file created when calling utils.store_pred_label_strs during eval
"""
def main(_):
    
    json_file = FLAGS.test_json
    model_output_json = FLAGS.model_output_json

    result_strings = parse_model_output(model_output_json) 

    num_empty = 0 

    for i, result_string in enumerate(result_strings):
        pred_str, label_str = parse_pred_label_chunks(result_string)
        if pred_str is None or label_str is None:
            num_empty += 1
            continue
        
        
        # entry = find_matching_entry(json_file, label_str)
        entry = get_entry(json_file, i)
        pred_points, label_points = get_rescaled_points(json_file, entry, pred_str), get_rescaled_points(json_file, entry, label_str)
        
        create_viz(json_file, entry, pred_points, label_points, save=FLAGS.save, outdir=FLAGS.outdir, output_type=FLAGS.format_style)
        # print('calculating mses')
        # print(calculate_errors(pred_str, label_str, FLAGS.format_style))

    print("Number of empty predictions:", num_empty)



if __name__ == '__main__':
    app.run(main)